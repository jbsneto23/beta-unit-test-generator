<?xml version="1.0" encoding="UTF-8"?>
<test-suite>
    <machine-name>TicTacToe</machine-name>
    <machine-invariant>
        <invariant-clause>((ThreeInRow(bposn) = TRUE) =&gt; (ThreeInRow(rposn) = FALSE))</invariant-clause>
        <invariant-clause>((ThreeInRow(rposn) = TRUE) =&gt; (ThreeInRow(bposn) = FALSE))</invariant-clause>
        <invariant-clause>((turn = blue) =&gt; (card(bposn) &lt;= card(rposn) &amp; card(rposn) &lt;= (card(bposn) + 1)))</invariant-clause>
        <invariant-clause>((turn = red) =&gt; (card(rposn) &lt;= card(bposn) &amp; card(bposn) &lt;= (card(rposn) + 1)))</invariant-clause>
        <invariant-clause>bposn /\ rposn = {}</invariant-clause>
        <invariant-clause>bposn &lt;: 0..8</invariant-clause>
        <invariant-clause>rposn &lt;: 0..8</invariant-clause>
        <invariant-clause>turn : Player</invariant-clause>
    </machine-invariant>
    <operation-under-test>BlueMove</operation-under-test>
    <testing-strategy>Input Space Partition</testing-strategy>
    <coverage-criteria>Equivalent Classes (Pairwise)</coverage-criteria>
    <oracle-strategy>
        <state-variables>true</state-variables>
        <return-variables>true</return-variables>
        <invariant-ok>true</invariant-ok>
    </oracle-strategy>
    <test-cases>
        <test-case>
            <id>1</id>
            <formula>pp : ((8 + 1))..MAXINT &amp; ((ThreeInRow(rposn) = TRUE) =&gt; (ThreeInRow(bposn) = FALSE)) &amp; ((ThreeInRow(bposn) = TRUE) =&gt; (ThreeInRow(rposn) = FALSE)) &amp; ((turn = red) =&gt; (card(rposn) &lt;= card(bposn) &amp; card(bposn) &lt;= (card(rposn) + 1))) &amp; pp /: bposn \/ rposn &amp; ((turn = blue) =&gt; (card(bposn) &lt;= card(rposn) &amp; card(rposn) &lt;= (card(bposn) + 1))) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; turn : Player &amp; ThreeInRow(rposn) = FALSE &amp; bposn &lt;: 0..8 &amp; turn = blue</formula>
            <preamble/>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters>
                <parameter>
                    <identifier>pp</identifier>
                    <values>
                        <value>9</value>
                    </values>
                </parameter>
            </operation-parameters>
        </test-case>
        <test-case>
            <id>2</id>
            <formula>pp : ((8 + 1))..MAXINT &amp; ((ThreeInRow(rposn) = TRUE) =&gt; (ThreeInRow(bposn) = FALSE)) &amp; ((ThreeInRow(bposn) = TRUE) =&gt; (ThreeInRow(rposn) = FALSE)) &amp; ((turn = red) =&gt; (card(rposn) &lt;= card(bposn) &amp; card(bposn) &lt;= (card(rposn) + 1))) &amp; pp /: bposn \/ rposn &amp; ((turn = blue) =&gt; (card(bposn) &lt;= card(rposn) &amp; card(rposn) &lt;= (card(bposn) + 1))) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; turn : Player &amp; not(ThreeInRow(rposn) = FALSE) &amp; bposn &lt;: 0..8 &amp; not(turn = blue)</formula>
            <preamble/>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>3</value>
                        <value>4</value>
                        <value>6</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                    </values>
                </variable>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>red</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters>
                <parameter>
                    <identifier>pp</identifier>
                    <values>
                        <value>9</value>
                    </values>
                </parameter>
            </operation-parameters>
        </test-case>
        <test-case>
            <id>3</id>
            <formula>pp : 0..8 &amp; ((ThreeInRow(rposn) = TRUE) =&gt; (ThreeInRow(bposn) = FALSE)) &amp; ((ThreeInRow(bposn) = TRUE) =&gt; (ThreeInRow(rposn) = FALSE)) &amp; ((turn = red) =&gt; (card(rposn) &lt;= card(bposn) &amp; card(bposn) &lt;= (card(rposn) + 1))) &amp; not(pp /: bposn \/ rposn) &amp; ((turn = blue) =&gt; (card(bposn) &lt;= card(rposn) &amp; card(rposn) &lt;= (card(bposn) + 1))) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; turn : Player &amp; not(ThreeInRow(rposn) = FALSE) &amp; bposn &lt;: 0..8 &amp; not(turn = blue)</formula>
            <preamble/>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>3</value>
                        <value>4</value>
                        <value>6</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                    </values>
                </variable>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>red</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters>
                <parameter>
                    <identifier>pp</identifier>
                    <values>
                        <value>0</value>
                    </values>
                </parameter>
            </operation-parameters>
        </test-case>
        <test-case>
            <id>4</id>
            <formula>pp : 0..8 &amp; ((ThreeInRow(rposn) = TRUE) =&gt; (ThreeInRow(bposn) = FALSE)) &amp; ((ThreeInRow(bposn) = TRUE) =&gt; (ThreeInRow(rposn) = FALSE)) &amp; ((turn = red) =&gt; (card(rposn) &lt;= card(bposn) &amp; card(bposn) &lt;= (card(rposn) + 1))) &amp; pp /: bposn \/ rposn &amp; ((turn = blue) =&gt; (card(bposn) &lt;= card(rposn) &amp; card(rposn) &lt;= (card(bposn) + 1))) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; turn : Player &amp; ThreeInRow(rposn) = FALSE &amp; bposn &lt;: 0..8 &amp; turn = blue</formula>
            <preamble/>
            <isNegative>false</isNegative>
            <state-variables>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters>
                <parameter>
                    <identifier>pp</identifier>
                    <values>
                        <value>0</value>
                    </values>
                </parameter>
            </operation-parameters>
        </test-case>
        <test-case>
            <id>5</id>
            <formula>pp : MININT..((0 - 1)) &amp; ((ThreeInRow(rposn) = TRUE) =&gt; (ThreeInRow(bposn) = FALSE)) &amp; ((ThreeInRow(bposn) = TRUE) =&gt; (ThreeInRow(rposn) = FALSE)) &amp; ((turn = red) =&gt; (card(rposn) &lt;= card(bposn) &amp; card(bposn) &lt;= (card(rposn) + 1))) &amp; pp /: bposn \/ rposn &amp; ((turn = blue) =&gt; (card(bposn) &lt;= card(rposn) &amp; card(rposn) &lt;= (card(bposn) + 1))) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; turn : Player &amp; ThreeInRow(rposn) = FALSE &amp; bposn &lt;: 0..8 &amp; not(turn = blue)</formula>
            <preamble/>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>red</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters>
                <parameter>
                    <identifier>pp</identifier>
                    <values>
                        <value>-1</value>
                    </values>
                </parameter>
            </operation-parameters>
        </test-case>
        <test-case>
            <id>6</id>
            <formula>pp : MININT..((0 - 1)) &amp; ((ThreeInRow(rposn) = TRUE) =&gt; (ThreeInRow(bposn) = FALSE)) &amp; ((ThreeInRow(bposn) = TRUE) =&gt; (ThreeInRow(rposn) = FALSE)) &amp; ((turn = red) =&gt; (card(rposn) &lt;= card(bposn) &amp; card(bposn) &lt;= (card(rposn) + 1))) &amp; pp /: bposn \/ rposn &amp; ((turn = blue) =&gt; (card(bposn) &lt;= card(rposn) &amp; card(rposn) &lt;= (card(bposn) + 1))) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; turn : Player &amp; not(ThreeInRow(rposn) = FALSE) &amp; bposn &lt;: 0..8 &amp; turn = blue</formula>
            <preamble/>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>3</value>
                        <value>4</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                    </values>
                </variable>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters>
                <parameter>
                    <identifier>pp</identifier>
                    <values>
                        <value>-1</value>
                    </values>
                </parameter>
            </operation-parameters>
        </test-case>
    </test-cases>
</test-suite>
